<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.ab.persistence">

	<class name="Street" table="ab_streets_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<many-to-one name="parent" column="town_id" class="Town" not-null="true" />
		<property name="status" not-null="true" />

		<set name="nameTemporals" inverse="true" cascade="all" lazy="true" sort="natural">
			<key column="street_id" not-null="true" />
			<one-to-many class="StreetNameTemporal" />
		</set>
		<set name="typeTemporals" inverse="true" cascade="all" lazy="true" sort="natural">
			<key column="street_id" not-null="true" />
			<one-to-many class="StreetTypeTemporal" />
		</set>
		<set name="districts" table="ab_streets_districts_tbl">
			<key column="street_id" />
			<many-to-many class="District" column="district_id" />
		</set>
		<set name="buildingses" inverse="true">
			<key column="street_id" />
			<one-to-many class="org.flexpay.ab.persistence.BuildingAddress" />
		</set>
	</class>

	<class name="StreetTypeTemporal" table="ab_street_types_temporal_tbl">
        <comment>Street type temporals</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="begin" column="begin_date" type="date" not-null="true" />
		<property name="end" column="end_date" type="date" not-null="true" />
		<property name="createDate" column="create_date" type="date" not-null="true" />
		<property name="invalidDate" column="invalid_date" type="date" not-null="true" />
		<many-to-one name="object" class="Street" foreign-key="FK_ab_street_types_temporal_tbl_street_id">
			<column name="street_id" not-null="true">
				<comment>Street reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="value" class="StreetType" foreign-key="FK_ab_street_types_temporal_tbl_street_type_id">
			<column name="street_type_id" not-null="false">
				<comment>Street type reference</comment>
			</column>
		</many-to-one>
	</class>

	<class name="StreetNameTemporal" table="ab_street_names_temporal_tbl">
		<comment>Street name temporals</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="begin" column="begin_date" type="date" not-null="true" />
		<property name="end" column="end_date" type="date" not-null="true" />
		<property name="createDate" column="create_date" type="date" not-null="true" />
		<property name="invalidDate" column="invalid_date" type="date" not-null="true" />
		<many-to-one name="object" class="Street" foreign-key="FK_ab_street_names_temporal_tbl_street_id">
			<column name="street_id" not-null="true">
				<comment>Street reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="value" class="StreetName" cascade="all"
					 foreign-key="FK_ab_street_names_temporal_tbl_street_name_id">
			<column name="street_name_id" not-null="false">
				<comment>Street name reference</comment>
			</column>
		</many-to-one>
	</class>

	<class name="StreetName" table="ab_street_names_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<many-to-one name="object" column="street_id" class="Street" not-null="true" />

		<set name="translations" inverse="true" cascade="all-delete-orphan">
			<key column="street_name_id" not-null="true" />
			<one-to-many class="StreetNameTranslation" />
		</set>
	</class>

	<class name="StreetNameTranslation" table="ab_street_name_translations_tbl"
		   optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="name" />
		<properties name="lang_street_name_pair" unique="true">
			<many-to-one name="translatable" column="street_name_id"
						 not-null="true" class="StreetName" />
			<many-to-one name="lang" column="language_id" not-null="true"
						 class="org.flexpay.common.persistence.Language" />
		</properties>
	</class>

	<query name="Street.findObjects">
		SELECT DISTINCT o
		FROM Street o
		LEFT JOIN FETCH o.nameTemporals t
		LEFT JOIN FETCH t.value v
		LEFT JOIN FETCH v.translations tr
		LEFT JOIN FETCH tr.lang l
		LEFT JOIN FETCH o.typeTemporals tt
		LEFT JOIN FETCH tt.value tv
		LEFT JOIN FETCH tv.translations ttr
		LEFT JOIN FETCH ttr.lang tl
		WHERE t.invalidDate='2100-12-31' and (tt is null or tt.invalidDate ='2100-12-31')
		and o.status=? and o.parent.id=?
	</query>

	<query name="Street.findObjects.count">
		select count(*) from Street o
		where o.status=? and o.parent.id=?
	</query>

	<query name="Street.readFull">
		select distinct o
		from Street o
			join fetch o.parent 
			left join fetch o.nameTemporals t
			left join fetch t.value v
			left join fetch v.translations tr
		where o.id=? and o.status=0 and t.invalidDate='2100-12-31'
	</query>

    <query name="Street.readFullCollection">
        SELECT DISTINCT s
        FROM Street s
            join fetch s.parent
            left join fetch s.nameTemporals t
            left join fetch t.value v
            left join fetch v.translations tr
        WHERE s.id in (:ids) and s.status=0 and t.invalidDate='2100-12-31'
    </query>

	<query name="Street.findTypeTemporals">
		select distinct stt
		from StreetTypeTemporal stt
			left join fetch stt.value v
			left join fetch v.translations
		where stt.object.id=? and stt.object.status=0 and stt.invalidDate='2100-12-31'
		order by stt.createDate 
	</query>

	<query name="Street.findDistricts">
		select distinct d
		from Street s
			left join s.districts d
			left join fetch d.nameTemporals dt
			left join fetch dt.value dv
			left join fetch dv.translations
		WHERE s.id=? and s.status=0 and dt.invalidDate='2100-12-31'
	</query>

	<query name="StreetNameTemporal.readFull">
		SELECT DISTINCT t
		FROM StreetNameTemporal t
		LEFT JOIN FETCH t.value v
		LEFT JOIN FETCH v.translations tr
		LEFT JOIN FETCH tr.lang l
		LEFT JOIN FETCH l.translations
		WHERE t.id=?
	</query>

	<query name="StreetName.readFull">
		SELECT DISTINCT n
		FROM StreetName n
		LEFT JOIN FETCH n.object
		LEFT JOIN FETCH n.translations tr
		LEFT JOIN FETCH tr.lang l
		LEFT JOIN FETCH l.translations
		WHERE n.id=?
	</query>

	<query name="Street.findByTownAndName">
		SELECT DISTINCT s
		FROM Street s
		LEFT JOIN FETCH s.nameTemporals t
		LEFT JOIN FETCH t.value v
		LEFT JOIN FETCH v.translations tr
		LEFT JOIN FETCH tr.lang l
		LEFT JOIN FETCH s.typeTemporals tt
		LEFT JOIN FETCH tt.value tv
		LEFT JOIN FETCH tv.translations ttr
		WHERE s.parent.id=? AND t.invalidDate='2100-12-31' AND lower(tr.name) like ?
	</query>

    <query name="Street.findByTownAndQuery">
        select distinct s
        from Street s
            left join fetch s.nameTemporals t
            left join fetch t.value v
            left join fetch v.translations tr
            left join fetch tr.lang l
            left join fetch s.typeTemporals tt
            left join fetch tt.value tv
            left join fetch tv.translations ttr
        where s.status = 0
              and s.parent.id = ?
              and t.invalidDate='2100-12-31'
              and lower(tr.name) like ?
    </query>

    <query name="Street.deleteStreet">
        delete from Street where id=?
    </query>

    <query name="Street.deleteTypeTemporals">
        delete from StreetTypeTemporal t where t.object.id=?
    </query>

    <query name="Street.deleteNameTemporals">
        delete from StreetNameTemporal t where t.object.id=?
    </query>

    <query name="Street.deleteNames">
        delete from StreetName n where n.object.id=?
    </query>

    <query name="Street.deleteNameTranslations">
        delete from StreetNameTranslation where translatable.id in (
        select id from StreetName n where n.object.id=?
        )
    </query>

</hibernate-mapping>
