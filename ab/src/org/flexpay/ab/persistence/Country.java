package org.flexpay.ab.persistence;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import javax.persistence.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Country generated by hbm2java
 */
@Entity
@Table (name = "countries_tbl")
@NamedQueries ({
@NamedQuery (name = "Country.listCountries", query = "FROM Country")
		})
public class Country implements Serializable {

	// Fields
	private Long id;
	private CountryStatus countryStatus;
	private List<CountryName> countryNames = Collections.emptyList();
	private List<Region> regions = new ArrayList<Region>();

	// Constructors

	/**
	 * default constructor
	 */
	public Country() {
	}

	/**
	 * Getter for property 'id'.
	 *
	 * @return Value for property 'id'.
	 */
	@Id
	@GeneratedValue
	public Long getId() {
		return this.id;
	}

	/**
	 * Setter for property 'id'.
	 *
	 * @param id Value to set for property 'id'.
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Getter for property 'countryStatus'.
	 *
	 * @return Value for property 'countryStatus'.
	 */
	public CountryStatus getCountryStatus() {
		return this.countryStatus;
	}

	/**
	 * Setter for property 'countryStatus'.
	 *
	 * @param countryStatus Value to set for property 'countryStatus'.
	 */
	public void setCountryStatus(CountryStatus countryStatus) {
		this.countryStatus = countryStatus;
	}

	/**
	 * Getter for property 'regions'.
	 *
	 * @return Value for property 'regions'.
	 */
	@OneToMany (cascade = {}, fetch = FetchType.LAZY, mappedBy = "country")
	public List<Region> getRegions() {
		return this.regions;
	}

	/**
	 * Setter for property 'regions'.
	 *
	 * @param regions Value to set for property 'regions'.
	 */
	public void setRegions(List<Region> regions) {
		this.regions = regions;
	}

	public String getName(String lang) {
		CountryName name = getCountryName(lang);
		return name != null ? name.getName() : null;
	}

	public String getShortName(String lang) {
		CountryName name = getCountryName(lang);
		return name != null ? name.getShortName() : null;
	}

	public CountryName getCountryName(String lang) {
		for (CountryName name : countryNames) {
			if (lang.equals(name.getName())) {
				return name;
			}
		}

		return null;
	}

	/**
	 * Getter for property 'countryNames'.
	 *
	 * @return Value for property 'countryNames'.
	 */
	@OneToMany (mappedBy = "country")
	public List<CountryName> getCountryNames() {
		return countryNames;
	}

	/**
	 * Setter for property 'countryNames'.
	 *
	 * @param countryNames Value to set for property 'countryNames'.
	 */
	public void setCountryNames(List<CountryName> countryNames) {
		this.countryNames = countryNames;
	}

	/**
	 * {@inheritDoc}
	 */
	public String toString() {
		return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
				.append("id", id)
				.append("Status", countryStatus)
				.append("Names", countryNames.toArray())
				.append("Regions", regions.toArray())
				.toString();
	}
}
