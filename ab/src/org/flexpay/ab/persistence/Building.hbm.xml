<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.ab.persistence">

	<class name="Buildings" table="ab_buildingses_tbl">
		<id name="id" column="id">
			<generator class="native"/>
		</id>

		<property name="status" not-null="true"/>
		<many-to-one name="street" column="street_id" not-null="true"/>
		<many-to-one name="building" column="building_id" not-null="true"/>

		<set name="buildingAttributes" inverse="true" cascade="all-delete-orphan">
			<key column="buildings_id" not-null="true"/>
			<one-to-many class="BuildingAttribute"/>
		</set>

		<property name="primaryStatus" column="primary_status"/>
	</class>

	<class name="BuildingAttribute" table="ab_building_attributes_tbl">
		<id name="id" column="id">
			<generator class="native"/>
		</id>

		<property name="value">
			<column name="value" index="indx_value" not-null="true">
				<comment>Building attribute value</comment>
			</column>
		</property>
		<many-to-one name="buildingAttributeType" column="attribute_type_id" not-null="true"/>
		<many-to-one name="buildings" column="buildings_id" not-null="true"/>
	</class>

	<class name="BuildingAttributeType" table="ab_building_attribute_types_tbl">
		<comment>Building attribute type (number, bulk, etc.)</comment>
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<set name="translations" inverse="true" cascade="all-delete-orphan">
			<key column="attribute_type_id" not-null="true"/>
			<one-to-many class="BuildingAttributeTypeTranslation"/>
		</set>
	</class>

	<class name="BuildingAttributeTypeTranslation"
		   table="ab_building_attribute_type_translations_tbl">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<property name="name" not-null="true"/>
		<property name="shortName" column="short_name"/>
		<properties name="lang_building_attribute_type_pair" unique="true">
			<many-to-one name="translatable" column="attribute_type_id" not-null="true"
						 class="BuildingAttributeType"/>
			<many-to-one name="lang" column="language_id" not-null="true"/>
		</properties>
	</class>

	<class name="BuildingStatus" table="ab_building_statuses_tbl">
		<id name="id" column="id">
			<generator class="native"/>
		</id>

		<property name="begin" type="date" column="begin_date" not-null="true"/>
		<property name="end" type="date" column="end_date" not-null="true"/>
		<property name="value" not-null="true"/>

		<many-to-one name="building" column="building_id" class="Building"
					 not-null="true"/>
	</class>

	<query name="Buildings.readFull">
		select distinct o
		FROM Buildings o
		inner join fetch o.street street
		LEFT JOIN FETCH o.buildingAttributes attrs
		LEFT JOIN FETCH attrs.buildingAttributeType attrType
		LEFT JOIN FETCH attrType.translations attrTypeTr
		WHERE o.id=? and o.status=0
	</query>

	<query name="Buildings.findBuildings.count">
		select count(*) from Buildings o where o.status=0 and o.street.id=?
	</query>

	<query name="Buildings.findBuildings">
		SELECT DISTINCT o
		FROM Buildings o
		LEFT JOIN FETCH o.buildingAttributes attrs
		LEFT JOIN FETCH attrs.buildingAttributeType attrType
		LEFT JOIN FETCH attrType.translations attrTypeTr
		LEFT JOIN FETCH attrTypeTr.lang langAttr
		LEFT JOIN FETCH langAttr.translations
		WHERE o.status = 0 AND o.street.id = ?
	</query>

	<query name="Buildings.findBuilding">
		select o.building
		from Buildings o
		where o.id=?
	</query>

	<query name="Buildings.findStreetDistrictBuildings.count">
		select count(*)
		from Buildings o
		where o.status=0 and o.street.id=? and o.building.district.id=?
	</query>

	<query name="Buildings.findStreetDistrictBuildings">
		select distinct o
		from Buildings o
		left join fetch o.buildingAttributes attrs
		inner join fetch attrs.buildingAttributeType attrType
		left join fetch attrType.translations
		WHERE o.status = 0 and o.street.id=? and o.building.district.id=?
	</query>

	<query name="BuildingAttributeType.readFull">
		select distinct type
		from BuildingAttributeType type
		left join fetch type.translations typeTr
		where type.id=?
	</query>

	<query name="BuildingAttributeType.findAttributeTypes">
		select distinct type
		from BuildingAttributeType type
		left join fetch type.translations typeTr
	</query>

	<query name="Buildings.findByNumberWithDistrict">
		select distinct b
		from Buildings b
		inner join fetch b.buildingAttributes a
		inner join fetch a.buildingAttributeType t
		where b.building.district.id=? and b.street.id=?
		and exists ( from BuildingAttribute ba where ba.buildings.id=b.id and
		ba.buildingAttributeType.id=? and ba.value=?)
	</query>

	<query name="Buildings.findByNumber">
		select distinct b
		from Buildings b
		inner join fetch b.buildingAttributes a
		inner join fetch a.buildingAttributeType t
		where b.street.id=?
		and exists ( from BuildingAttribute ba where ba.buildings.id=b.id and
		ba.buildingAttributeType.id=? and ba.value=?)
	</query>

	<query name="Buildings.findBuildingBuildings">
		select distinct b
		from Buildings b
		left join fetch b.buildingAttributes a
		inner join fetch a.buildingAttributeType t
		where b.building.id=? and b.status=0
	</query>
</hibernate-mapping>
