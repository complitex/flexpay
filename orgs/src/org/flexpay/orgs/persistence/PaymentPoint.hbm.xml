<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.orgs.persistence">

	<class name="PaymentPoint" table="orgs_payment_points_tbl" optimistic-lock="version">
		<comment>Payment points</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<version name="version" access="field">
			<column name="version" not-null="true">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled-disabled status</comment>
			</column>
		</property>
		<property name="address">
			<column name="address" not-null="true">
				<comment>Address</comment>
			</column>
		</property>
		<many-to-one name="collector" foreign-key="FK_orgs_payment_points_tbl_collector_id"
					 class="org.flexpay.orgs.persistence.PaymentCollector">
			<column name="collector_id" not-null="true">
				<comment>Payments collector reference</comment>
			</column>
		</many-to-one>
		<set name="names" inverse="true" cascade="all-delete-orphan">
			<key column="payment_point_id" not-null="true" />
			<one-to-many class="PaymentPointName" />
		</set>
	</class>

	<class name="PaymentPointName" table="orgs_payment_point_names_tbl">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="name">
			<column name="name" not-null="true">
				<comment>Name value</comment>
			</column>
		</property>
		<properties name="lang_payment_point_pair" unique="true">
			<many-to-one name="lang" foreign-key="FK_orgs_payment_point_names_tbl_name_language"
						 class="org.flexpay.common.persistence.Language">
				<column name="language_id" not-null="true">
					<comment>Language reference</comment>
				</column>
			</many-to-one>
			<many-to-one name="translatable" class="PaymentPoint"
						 foreign-key="FK_orgs_payment_point_names_tbl_point">
				<column name="payment_point_id" not-null="true">
					<comment>Payment point reference</comment>
				</column>
			</many-to-one>
		</properties>
	</class>

	<query name="PaymentPoint.listPoints.count">
		select count(pp)
		from PaymentPoint pp
		where pp.status = 0
	</query>

	<query name="PaymentPoint.listPoints">
		select distinct pp
		from PaymentPoint pp
			inner join fetch pp.collector
            left join fetch pp.names
		where pp.status=0
	</query>

	<query name="PaymentPoint.listCollectorPoints.count">
		select count(pp)
		from PaymentPoint pp
		where pp.status=0 and pp.collector.id = ?
	</query>

	<query name="PaymentPoint.listCollectorPoints">
		select distinct pp
		from PaymentPoint pp
			inner join fetch pp.collector c
			left join fetch pp.names
		where pp.status=0 and c.id = ?
	</query>

	<query name="PaymentPoint.readFull">
		select distinct pp
		from PaymentPoint pp
            left join fetch pp.names
            inner join fetch pp.collector c
            inner join fetch c.organization o
            left join fetch o.names
		where pp.id=?
	</query>

	<query name="PaymentPoint.readFullCollection">
		select distinct pp
		from PaymentPoint pp
            left join fetch pp.names
		where pp.id in (:ids)
	</query>

    <query name="PaymentPoint.findByIdAndCollectorId">
        select distinct pp
        from PaymentPoint pp
            left join fetch pp.names
            inner join fetch pp.collector c
        where pp.id=? and c.id=?
    </query>

    <query name="PaymentPoint.listPaymentPointsWithTradingDay">
        select distinct pp
		from PaymentPoint pp
			inner join fetch pp.collector c
			left join fetch pp.names
		where c.tradingDayProcessInstanceId is not null
    </query>

    <query name="PaymentPoint.listPaymentPointsWithoutTradingDay">
        select distinct pp
		from PaymentPoint pp
			inner join fetch pp.collector c
			left join fetch pp.names
		where c.tradingDayProcessInstanceId is null
    </query>
	
</hibernate-mapping>
