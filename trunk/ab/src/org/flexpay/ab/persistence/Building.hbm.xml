<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.ab.persistence">

	<class name="BuildingAddress" table="ab_building_addresses_tbl">

		<comment>Building addresses</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>

		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled/Disabled status</comment>
			</column>
		</property>

		<property name="primaryStatus">
			<column name="primary_status" not-null="true">
				<comment>Flag of primary building address</comment>
			</column>
		</property>

		<many-to-one name="street" foreign-key="ab_buildingses_tbl_street_id">
			<column name="street_id" not-null="true">
				<comment>Street reference</comment>
			</column>
		</many-to-one>

		<many-to-one name="building" foreign-key="ab_buildingses_tbl_building_id">
			<column name="building_id" not-null="true">
				<comment>Building reference this address belongs to</comment>
			</column>
		</many-to-one>

		<set name="buildingAttributes" inverse="true" cascade="all-delete-orphan">
			<key column="buildings_id" not-null="true" />
			<one-to-many class="AddressAttribute" />
		</set>

	</class>

	<class name="AddressAttribute" table="ab_building_address_attributes_tbl">

		<comment>Building address attributes</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>

		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled/Disabled status</comment>
			</column>
		</property>
		<property name="value">
			<column name="value" index="indx_value" not-null="true">
				<comment>Building attribute value</comment>
			</column>
		</property>
		<many-to-one name="buildingAttributeType" foreign-key="ab_building_attributes_tbl_attribute_type_id">
			<column name="attribute_type_id" not-null="true">
				<comment>Attribute type reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="buildings" foreign-key="ab_building_attributes_tbl_buildings_id">
			<column name="buildings_id" not-null="true">
				<comment>Building address reference</comment>
			</column>
		</many-to-one>
	</class>

	<class name="AddressAttributeType" table="ab_building_address_attribute_types_tbl">

		<comment>Building attribute type (number, bulk, etc.)</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled/Disabled status</comment>
			</column>
		</property>

		<set name="translations" inverse="true" cascade="all-delete-orphan">
			<key column="attribute_type_id" not-null="true" />
			<one-to-many class="AddressAttributeTypeTranslation" />
		</set>
	</class>

	<class name="AddressAttributeTypeTranslation" table="ab_building_address_attribute_type_translations_tbl">

		<comment>Building attribute type translations</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>

		<property name="name">
			<column name="name" not-null="true">
				<comment>Type translation</comment>
			</column>
		</property>
		<property name="shortName">
			<column name="short_name" not-null="false">
				<comment>Optional short translation</comment>
			</column>
		</property>

		<properties name="lang_building_attribute_type_pair" unique="true">
			<many-to-one name="translatable" class="AddressAttributeType"
						 foreign-key="ab_building_attribute_type_translations_tbl_attribute_type_id">
				<column name="attribute_type_id" not-null="true">
					<comment>Building attribute type reference</comment>
				</column>
			</many-to-one>
			<many-to-one name="lang" class="org.flexpay.common.persistence.Language"
						 foreign-key="lang_building_attribute_type_pair_language_id">
				<column name="language_id" not-null="true">
					<comment>Language reference</comment>
				</column>
			</many-to-one>
		</properties>
	</class>

	<class name="BuildingStatus" table="ab_building_statuses_tbl">

		<comment>Building status, for example building started or rebuilding</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>

		<property name="begin" type="date">
			<column name="begin_date" not-null="true">
				<comment>Status begin date</comment>
			</column>
		</property>
		<property name="end" type="date">
			<column name="end_date" not-null="true">
				<comment>Status end date</comment>
			</column>
		</property>
		<property name="value">
			<column name="value" not-null="true">
				<comment>Status value</comment>
			</column>
		</property>

		<many-to-one name="building" class="Building" foreign-key="ab_building_statuses_tbl_building_id">
			<column name="building_id" not-null="true">
				<comment>Building reference status belongs to</comment>
			</column>
		</many-to-one>
	</class>

	<query name="Building.findStreetBuildings">
		select distinct b
		from Building b
			left join fetch b.buildingses bs
		where bs.street.id=?
	</query>

	<query name="BuildingAddress.readFull">
		select distinct o
		from BuildingAddress o
            inner join fetch o.street street
            left join fetch o.buildingAttributes attrs
            left join fetch attrs.buildingAttributeType attrType
            left join fetch attrType.translations attrTypeTr
		where o.id=? and o.status=0
	</query>

	<query name="BuildingAddress.readFullCollection">
		select distinct o
		from BuildingAddress o
			left join fetch o.buildingAttributes attrs
			left join fetch attrs.buildingAttributeType attrType
			left join fetch attrType.translations attrTypeTr
		where o.id in (:ids) and o.status=0
	</query>

	<query name="BuildingAddress.findBuildings.count">
		select count(*)
		from BuildingAddress o
		where o.status=0 and o.street.id=?
	</query>

	<query name="BuildingAddress.findBuildings">
        select distinct o
		from BuildingAddress o
            left join fetch o.buildingAttributes attrs
            left join fetch attrs.buildingAttributeType attrType
            left join fetch attrType.translations attrTypeTr
            left join fetch attrTypeTr.lang langAttr
            left join fetch langAttr.translations
		where o.status = 0 and o.street.id = ?
        order by attrTypeTr.shortName, attrs.value
	</query>

	<query name="BuildingAddress.findBuilding">
		select o.building
		from BuildingAddress o
		where o.id=?
	</query>

	<query name="BuildingAddress.findStreetDistrictBuildings.count">
		select count(*)
		from BuildingAddress o
		where o.status=0 and o.street.id=? and o.building.district.id=?
	</query>

	<query name="BuildingAddress.findStreetDistrictBuildings">
		select distinct o
		from BuildingAddress o
            left join fetch o.buildingAttributes attrs
            inner join fetch attrs.buildingAttributeType attrType
            left join fetch attrType.translations
		where o.status = 0 and o.street.id=? and o.building.district.id=?
	</query>

	<query name="BuildingAddress.findByNumberWithDistrict">
		select distinct b
		from BuildingAddress b
            inner join fetch b.buildingAttributes a
            inner join fetch a.buildingAttributeType t
		where b.building.district.id=? and b.street.id=? and exists (
		    from AddressAttribute ba
		    where ba.buildings.id=b.id and
		        ba.buildingAttributeType.id=? and ba.value=?
            )
	</query>

	<query name="BuildingAddress.findByNumber">
		select distinct b
		from BuildingAddress b
            inner join fetch b.buildingAttributes a
            inner join fetch a.buildingAttributeType t
		where b.street.id=? and exists (
		    from AddressAttribute ba
		    where ba.buildings.id=b.id and
		        ba.buildingAttributeType.id=? and ba.value=?
            )
	</query>

	<query name="BuildingAddress.findBuildingBuildings.count">
		select count(b)
		from BuildingAddress b
		where b.building.id=? and b.status=0
	</query>

	<query name="BuildingAddress.findBuildingBuildings">
		select distinct b
		from BuildingAddress b
			left join fetch b.buildingAttributes a
			left join fetch a.buildingAttributeType t
		where b.building.id=? and b.status=0
	</query>

    <query name="AddressAttributeType.readFull">
        select distinct aat
        from AddressAttributeType aat
            left join fetch aat.translations tr
            left join fetch tr.lang l
            left join fetch l.translations
        where aat.id=?
    </query>

    <query name="AddressAttributeType.findAttributeTypes">
        select distinct aat
        from AddressAttributeType aat
            left join fetch aat.translations tr
            left join fetch tr.lang l
            left join fetch l.translations
    </query>

    <query name="AddressAttributeType.findByNameAndLanguage">
        select distinct aat
        from AddressAttributeType aat
            left join aat.translations tr
        where tr.name=? and tr.lang.id=? and aat.status=0
    </query>

    <query name="AddressAttributeType.findByShortNameAndLanguage">
        select distinct aat
        from AddressAttributeType aat
            left join aat.translations tr
        where tr.shortName=? and tr.lang.id=? and aat.status=0
    </query>

</hibernate-mapping>
