package org.flexpay.ab.persistence;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.flexpay.common.persistence.DomainObjectWithStatus;
import org.flexpay.common.util.config.ApplicationConfig;

import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Set;

/**
 * PersonIdentity generated by hbm2java
 */
public class PersonIdentity extends DomainObjectWithStatus {

	private IdentityType identityType;
	private Person person;
	private Date beginDate;
	private Date endDate;
	private Date birthDate;
	private String organization;
	private String firstName;
	private String lastName;
	private String middleName;
	private String serialNumber;
	private String documentNumber;
	private boolean isDefault;
	private Set<PersonIdentityAttribute> personIdentityAttributes = Collections.emptySet();

	public PersonIdentity() {
	}

	public IdentityType getIdentityType() {
		return this.identityType;
	}

	public void setIdentityType(IdentityType identityType) {
		this.identityType = identityType;
	}

	public Date getBeginDate() {
		return this.beginDate;
	}

	public void setBeginDate(Date beginDate) {
		this.beginDate = DateUtils.truncate(beginDate, Calendar.DAY_OF_MONTH);
		if (this.beginDate.compareTo(ApplicationConfig.getFutureInfinite()) > 0) {
			this.beginDate = ApplicationConfig.getFutureInfinite();
		}
	}

	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = DateUtils.truncate(endDate, Calendar.DAY_OF_MONTH);
		if (this.endDate.compareTo(ApplicationConfig.getFutureInfinite()) > 0) {
			this.endDate = ApplicationConfig.getFutureInfinite();
		}
	}

	public String getOrganization() {
		return this.organization;
	}

	public void setOrganization(String organization) {
		this.organization = organization;
	}

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	public String getSerialNumber() {
		return this.serialNumber;
	}

	public void setSerialNumber(String serialNumber) {
		this.serialNumber = serialNumber;
	}

	public String getDocumentNumber() {
		return this.documentNumber;
	}

	public void setDocumentNumber(String documentNumber) {
		this.documentNumber = documentNumber;
	}

	public Set<PersonIdentityAttribute> getPersonIdentityAttributes() {
		return this.personIdentityAttributes;
	}

	public void setPersonIdentityAttributes(Set<PersonIdentityAttribute> personIdentityAttributes) {
		this.personIdentityAttributes = personIdentityAttributes;
	}

	/**
	 * Getter for property 'birthDate'.
	 *
	 * @return Value for property 'birthDate'.
	 */
	public Date getBirthDate() {
		return birthDate;
	}

	/**
	 * Setter for property 'birthDate'.
	 *
	 * @param birthDate Value to set for property 'birthDate'.
	 */
	public void setBirthDate(Date birthDate) {
		this.birthDate = DateUtils.truncate(birthDate, Calendar.DAY_OF_MONTH);
		if (this.birthDate.compareTo(ApplicationConfig.getPastInfinite()) < 0) {
			this.birthDate = ApplicationConfig.getPastInfinite();
		}
	}

	/**
	 * Getter for property 'person'.
	 *
	 * @return Value for property 'person'.
	 */
	public Person getPerson() {
		return person;
	}

	/**
	 * Setter for property 'person'.
	 *
	 * @param person Value to set for property 'person'.
	 */
	public void setPerson(Person person) {
		this.person = person;
	}

	/**
	 * Getter for property 'default'.
	 *
	 * @return Value for property 'default'.
	 */
	public boolean isDefault() {
		return isDefault;
	}

	/**
	 * Setter for property 'default'.
	 *
	 * @param isDefault Value to set for property 'default'.
	 */
	public void setDefault(boolean isDefault) {
		this.isDefault = isDefault;
	}

	/**
	 * Check if identity attributes are all blank
	 *
	 * @return <code>true</code> if identity is considered blank, or <code>false</code> otherwise
	 */
	public boolean isBlank() {
		Date futureInfinite = ApplicationConfig.getFutureInfinite();
		Date pastInfinite = ApplicationConfig.getPastInfinite();
		return StringUtils.isBlank(firstName) &&
				StringUtils.isBlank(middleName) &&
				StringUtils.isBlank(lastName) &&
				beginDate.equals(pastInfinite) &&
				endDate.equals(futureInfinite) &&
				birthDate.equals(futureInfinite) &&
				!isDefault &&
				StringUtils.isBlank(organization) &&
				StringUtils.isBlank(serialNumber) &&
				StringUtils.isBlank(documentNumber);
	}

	public void copy(PersonIdentity pi) {
		firstName = pi.getFirstName();
		middleName = pi.getMiddleName();
		lastName = pi.getLastName();
		beginDate = pi.getBeginDate();
		endDate = pi.getEndDate();
		birthDate = pi.getBirthDate();
		isDefault = pi.isDefault();
		organization = pi.getOrganization();
		serialNumber = pi.getSerialNumber();
		documentNumber = pi.getDocumentNumber();
	}
}
