<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.ab.persistence">

	<class name="Town" table="ab_towns_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<many-to-one name="parent" column="region_id" class="Region" not-null="true" />
		<property name="status" not-null="true" />

		<set name="nameTemporals" inverse="true" sort="natural" cascade="all">
			<key column="town_id" not-null="true" />
			<one-to-many class="TownNameTemporal" />
		</set>
		<set name="typeTemporals" inverse="true" sort="natural" cascade="all">
			<key column="town_id" not-null="true" />
			<one-to-many class="TownTypeTemporal" />
		</set>
		<set name="districts" inverse="true">
			<key column="town_id" not-null="true" />
			<one-to-many class="District" />
		</set>
		<set name="streets" inverse="true">
			<key column="town_id" not-null="true" />
			<one-to-many class="Street" />
		</set>
	</class>

	<class name="TownNameTemporal" table="ab_town_names_temporal_tbl">
        <comment>Town name temporals</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="begin" column="begin_date" type="date" not-null="true" />
		<property name="end" column="end_date" type="date" not-null="true" />
		<property name="createDate" column="create_date" type="date" not-null="true" />
		<property name="invalidDate" column="invalid_date" type="date" not-null="true" />
		<many-to-one name="object" class="Town" column="town_id" not-null="true" />
		<many-to-one name="value" class="TownName" column="town_name_id" cascade="all" />
	</class>

	<class name="TownName" table="ab_town_names_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<many-to-one name="object" column="town_id" class="Town" not-null="true" />

		<set name="translations" inverse="true" cascade="all-delete-orphan">
			<key column="town_name_id" not-null="true" />
			<one-to-many class="TownNameTranslation" />
		</set>
	</class>

	<class name="TownNameTranslation" table="ab_town_name_translations_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="name" />
		<properties name="lang_town_name_pair" unique="true">
			<many-to-one name="translatable" column="town_name_id"
						 not-null="true" class="TownName" />
			<many-to-one name="lang" column="language_id" not-null="true"
						 class="org.flexpay.common.persistence.Language" />
		</properties>
	</class>

    <class name="TownTypeTemporal" table="ab_town_types_temporal_tbl">
        <comment>Town type temporals</comment>
        <id name="id" column="id">
            <generator class="native" />
        </id>
        <property name="begin" column="begin_date" type="date" not-null="true" />
        <property name="end" column="end_date" type="date" not-null="true" />
        <property name="createDate" column="create_date" type="date" not-null="true" />
        <property name="invalidDate" column="invalid_date" type="date" not-null="true" />
        <many-to-one name="town" class="Town" column="town_id" not-null="true" />
        <many-to-one name="value" class="TownType" column="town_type_id" />
    </class>

	<query name="Town.findObjects">
        select distinct t
        from Town t
            left join fetch t.nameTemporals nt
            left join fetch nt.value v
            left join fetch v.translations tr
            left join fetch t.typeTemporals tt
            left join fetch tt.value tv
            left join fetch tv.translations
		where nt.invalidDate='2100-12-31'
            and (tt is null or tt.invalidDate ='2100-12-31')
		    and t.status=?
            and t.parent.id=?
	</query>

	<query name="Town.findObjects.count">
		select count(*)
		from Town t
		where t.status=?
            and t.parent.id=?
	</query>

	<query name="Town.readFull">
        select distinct t
        from Town t
			left join fetch t.nameTemporals nt
			left join fetch nt.value ntv
			left join fetch ntv.translations
            left join fetch t.typeTemporals tt
            left join fetch tt.value ttv
            left join fetch ttv.translations
		where t.id=?
            and nt.invalidDate='2100-12-31'
            and tt.invalidDate='2100-12-31'
	</query>

	<query name="Town.readFullCollection">
        select distinct t
        from Town t
			left join fetch t.nameTemporals nt
			left join fetch nt.value ntv
			left join fetch ntv.translations
            left join fetch t.typeTemporals tt
            left join fetch tt.value ttv
            left join fetch ttv.translations
		where t.id in (:ids)
            and nt.invalidDate='2100-12-31'
            and tt.invalidDate='2100-12-31'
	</query>

    <query name="Town.findByParentAndQuery">
        select distinct t
        from Town t
            left join fetch t.nameTemporals nt
            left join fetch nt.value v
            left join fetch v.translations tr
        where t.status=0
            and nt.invalidDate='2100-12-31'
            and t.parent.id=?
            and upper(tr.name) like ?
    </query>

    <query name="Town.findByRegionAndNameAndLanguage">
        select distinct t
        from Town t
            left join t.nameTemporals nt
            left join nt.value v
            left join v.translations tr
        where t.status=0
            and nt.invalidDate='2100-12-31'
            and t.parent.id=?
            and tr.name=?
            and tr.lang.id=?
    </query>

    <query name="Town.findWithFullHierarchy">
        select distinct t
        from Town t
            inner join fetch t.parent r
            left join fetch r.parent
            left join fetch t.nameTemporals nt
            left join fetch nt.value ntv
            left join fetch ntv.translations
            left join fetch t.typeTemporals tt
            left join fetch tt.value ttv
            left join fetch ttv.translations
        where t.id=?
            and nt.invalidDate='2100-12-31'
            and tt.invalidDate='2100-12-31'
    </query>

	<query name="TownName.readFull">
		select distinct n
		from TownName n
			left join fetch n.object
			left join fetch n.translations
		where n.id=?
	</query>

</hibernate-mapping>
