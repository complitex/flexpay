<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.orgs.persistence">

	<class name="ServiceProvider" table="orgs_service_providers_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<version name="version" access="field">
			<column name="version">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled-disabled status</comment>
			</column>
		</property>
        <property name="email">
			<column name="email" not-null="false">
				<comment>E-mail</comment>
			</column>
		</property>
		<many-to-one name="organization" class="Organization"
					 foreign-key="FK_orgs_service_provider_organization">
			<column name="organization_id" not-null="true">
				<comment>Organization reference</comment>
			</column>
		</many-to-one>
		<set name="descriptions" inverse="true" cascade="all-delete-orphan">
			<key column="service_provider_id" not-null="true"/>
			<one-to-many class="org.flexpay.orgs.persistence.ServiceProviderDescription"/>
		</set>
	</class>

	<class name="ServiceProviderDescription" table="orgs_service_provider_descriptions_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<version name="version" access="field">
			<column name="version">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
		<property name="name">
			<column name="name" not-null="true">
				<comment>Description value</comment>
			</column>
		</property>
		<properties name="lang_service_provider_pair" unique="true">
			<many-to-one name="lang" foreign-key="FK_orgs_service_provider_description_language"
						 class="org.flexpay.common.persistence.Language">
				<column name="language_id" not-null="true">
					<comment>Language reference</comment>
				</column>
			</many-to-one>
			<many-to-one name="translatable" class="org.flexpay.orgs.persistence.ServiceProvider"
						 foreign-key="FK_orgs_service_provider_description_service_provider">
				<column name="service_provider_id" not-null="true">
					<comment>Service provider reference</comment>
				</column>
			</many-to-one>
		</properties>
	</class>

	<class name="org.flexpay.orgs.persistence.ServiceProviderAttribute" table="payments_service_provider_attribute_tbl" optimistic-lock="version">
		<comment>ServiceProviderAttribute</comment>
		<id name="id">
			<column name="id">
				<comment>Primary key</comment>
			</column>
			<generator class="native" />
		</id>
        <version name="version" access="field">
			<column name="version">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
		<properties name="service_provider_name_attribute_type_pair" unique="true">
			<property name="name">
				<column name="name" not-null="true" length="50">
					<comment>Attribute name</comment>
				</column>
			</property>
			<many-to-one name="serviceProvider" class="org.flexpay.orgs.persistence.ServiceProvider"
						 foreign-key="FK_payments_service_provider_attribute_tbl_service_provider_id">
				<column name="service_provider_id" not-null="true">
					<comment>Service provider reference</comment>
				</column>
			</many-to-one>
		</properties>
		<property name="value">
			<column name="value" not-null="false" length="255">
				<comment>Attribute value</comment>
			</column>
		</property>
	</class>

	<query name="ServiceProvider.findByOrganizationId">
		from ServiceProvider where organization.id=?
	</query>

	<query name="ServiceProvider.readFull">
		select distinct o
		from ServiceProvider o
            left join fetch o.descriptions
            inner join fetch o.organization org
            left join fetch org.names
		where o.id=?
	</query>

	<query name="ServiceProvider.findProviderlessOrgs">
		select distinct o
		from Organization o
		 	left join fetch o.names
			left join fetch o.descriptions
			left join fetch o.serviceProviders sp
		where o.status=0
	</query>

	<query name="ServiceProvider.findProviders.count">
		select count(*)
		from ServiceProvider o
		where o.status=0
	</query>

	<query name="ServiceProvider.findProviders">
		select distinct o
		from ServiceProvider o
		 	left join fetch o.descriptions
		 	inner join fetch o.organization org
		 	left join fetch org.names 
		where o.status=0
	</query>

	<query name="ServiceProviderAttribute.listServiceProviderAttributes">
		FROM ServiceProviderAttribute o
		WHERE o.serviceProvider.id=?
	</query>

    <query name="ServiceProviderAttribute.findServiceProviderAttribute">
        FROM ServiceProviderAttribute o
        left outer join fetch o.serviceProvider
        WHERE o.serviceProvider.id = ? and o.name = ?
    </query>

</hibernate-mapping>
