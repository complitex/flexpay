<?xml version="1.0" encoding="UTF-8"?>
<project name="flexpay_templates" basedir="..">

	<property name="common.dir" value="${basedir}/common" />
	<property file="common/common_build.properties" />
	<property file="common/web/WEB-INF/common.properties" />

	<!-- Define classpath libraries -->
	<path id="commons.lib">
		<fileset dir="${common.dir}/lib/commons">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="hibernate.lib">
		<fileset dir="${common.dir}/lib">
			<include name="hibernate3/*.jar" />
			<include name="antlr/*.jar" />
			<include name="log4j/*.jar" />
			<include name="logging/*.jar" />
			<include name="freemarker/*.jar" />
		</fileset>
		<path refid="commons.lib" />
		<path refid="spring.lib" />
	</path>

	<path id="spring.lib">
		<fileset dir="${common.dir}/lib/spring2">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="freemarker.lib">
		<fileset dir="${common.dir}/lib/freemarker">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="struts.lib">
		<fileset dir="${common.dir}/lib">
			<include name="struts2/*.jar" />
			<include name="antlr/*.jar" />
			<include name="freemarker/*.jar" />
		</fileset>
	</path>

	<path id="log4j.lib">
		<fileset dir="${common.dir}/lib">
			<include name="log4j/*.jar" />
		</fileset>
	</path>

	<path id="j2ee.lib">
		<fileset dir="${common.dir}/lib">
			<include name="j2ee/*.jar" />
		</fileset>
	</path>

	<path id="junit.lib">
		<fileset dir="${common.dir}/lib">
			<include name="junit/*.jar" />
		</fileset>
	</path>

	<path id="javadbf.lib">
		<fileset dir="${common.dir}/lib">
			<include name="javadbf/*.jar" />
		</fileset>
	</path>

	<path id="ajax.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ajax/*.jar" />
		</fileset>
	</path>

	<path id="jbpm_jpdl.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jbpm/*.jar" />
		</fileset>
	</path>

	<path id="drools.lib">
		<fileset dir="${common.dir}/lib">
			<include name="drools/*.jar" />
		</fileset>
	</path>

	<path id="itext.lib">
		<fileset dir="${common.dir}/lib">
			<include name="itext/*.jar" />
		</fileset>
	</path>

	<path id="jasperreports.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jasperreports/*.jar" />
		</fileset>
	</path>

	<path id="quartz.lib">
		<fileset dir="${common.dir}/lib">
			<include name="quartz/*.jar" />
		</fileset>
	</path>

	<path id="jetbrains.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jetbrains/annotations.jar" />
			<include name="jetbrains/javac2.jar" />
		</fileset>
	</path>

	<path id="jetbrains.compile.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jetbrains/*.jar" />
		</fileset>
	</path>

	<path id="jdbc.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jdbc/*.jar" />
			<!-- log4jdbc used in tests depends on slf4j -->
			<include name="logging/*.jar" />
		</fileset>
	</path>

	<path id="csv.lib">
		<fileset dir="${common.dir}/lib">
			<include name="csv/*.jar" />
		</fileset>
	</path>

	<path id="xstream.lib">
		<fileset dir="${common.dir}/lib">
			<include name="xstream/*.jar" />
		</fileset>
	</path>

	<path id="spring-ws.lib">
		<fileset dir="${common.dir}/lib">
			<include name="spring-ws/*.jar" />
		</fileset>
	</path>

	<path id="openmq.lib">
		<fileset dir="${common.dir}/lib">
			<include name="openmq/*.jar" />
		</fileset>
	</path>

	<path id="opensso.lib">
		<fileset dir="${common.dir}/lib">
			<include name="opensso/*.jar" />
		</fileset>
	</path>

	<path id="ldap.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ldap/*.jar" />
		</fileset>
	</path>

	<path id="groovy.lib">
		<fileset dir="${common.dir}/lib">
			<include name="groovy/*.jar" />
		</fileset>
	</path>

	<path id="ant.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ant/*.jar" />
		</fileset>
	</path>

	<!-- NotNull instrumentation javac task -->
	<taskdef name="javac2"
			 classname="com.intellij.ant.Javac2"
			 classpathref="jetbrains.compile.lib" />

	<!-- Build templates -->
	<target name="template.compile.production" depends="init.build">
		<javac2 srcdir="${sources.dir}" includes="**/*.java"
				destdir="${build.dir}/classes"
				deprecation="on" source="1.5" target="1.5" debug="on" encoding="utf8"
				classpathref="classpath">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:unchecked" />
		</javac2>
	</target>

	<target name="template.compile.test" depends="init.build">
		<javac2 srcdir="${sources.dir}" includes="**/*.java"
				destdir="${build.dir}/classes"
				debug="on" deprecation="on" source="1.5" target="1.5" encoding="utf8"
				classpathref="classpath">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:unchecked" />
		</javac2>
	</target>

	<target name="init.build">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/lib" />
		<mkdir dir="${build.dir}/web" />
		<mkdir dir="${build.dir}/docs" />
		<mkdir dir="${build.dir}/src" />
		<mkdir dir="${build.dir}/empty" />
	</target>

	<target name="clean.build">
		<delete dir="${build.dir}/classes" includes="**/*" includeemptydirs="true" />
		<delete dir="${build.dir}/web" includes="**/*" />
		<delete dir="${build.dir}/docs" includes="**/*" />
	</target>

	<target name="clean.all">
		<delete dir="${build.dir}/classes" />
		<delete dir="${build.dir}/web" />
		<delete dir="${build.dir}/docs" />
		<delete dir="${build.dir}/lib" />
		<delete dir="${build.dir}/sql" />
	</target>

	<target name="init.distr">
		<mkdir dir="${distr.dir}" />
	</target>

	<target name="template.docs" depends="init.build,init.distr,clean.build">
		<javadoc sourcepath="${sources.dir}" destdir="${build.dir}/docs/api"
				 windowtitle="FlexPay ${module_name} API" encoding="UTF-8"
				 defaultexcludes="yes" author="true" version="true" use="true"
				 classpathref="classpath">
			<bottom>
				<![CDATA[<i>Copyright &#169; 2008 FlexPay. All Rights Reserved.</i>]]></bottom>
		</javadoc>
		<copy todir="${build.dir}/docs">
			<fileset refid="resources" />
		</copy>
		<zip basedir="${build.dir}/docs" destfile="${distr.dir}/${docs.file}" />
	</target>

	<target name="template.prepare.war" depends="init.build">
		<copy todir="${build.dir}/web${to_dir}" overwrite="true">
			<fileset refid="resources" />
		</copy>
		<native2ascii encoding="utf-8" src="${src.i18n.dir}"
					  dest="${build.dir}/src"
					  includes="**/*.properties" />
	</target>

	<target name="template.copy.classes">
		<copy todir="${build.dir}/web/WEB-INF/classes" overwrite="true">
			<fileset dir="${build.dir}/src" />
			<fileset dir="${build.dir}/classes" />
		</copy>
	</target>

	<target name="template.prepare.war.classes"
			description="Add all compiled classes to WEB-INF/classes">
		<copy todir="${build.dir}/web/WEB-INF/classes" overwrite="true">
			<fileset dir="${build.dir}/classes" />
		</copy>
	</target>

	<target name="common.war.include.libs">
		<war destfile="${warfile}" update="true">
			<lib dir="${common.dir}/lib/antlr" />
			<lib dir="${common.dir}/lib/hibernate3" />
			<lib dir="${common.dir}/lib/spring2" />
			<lib dir="${common.dir}/lib/commons" />
			<lib dir="${common.dir}/lib/struts2" />
			<lib dir="${common.dir}/lib/log4j" />
			<lib dir="${common.dir}/lib/jbpm" />
			<lib dir="${common.dir}/lib/drools" />
			<lib dir="${common.dir}/lib/javadbf" />
			<lib dir="${common.dir}/lib/ajax" />
			<lib dir="${common.dir}/lib/itext" />
			<lib dir="${common.dir}/lib/quartz" />
			<lib dir="${common.dir}/lib/jasperreports" />
			<lib dir="${common.dir}/lib/freemarker" />
			<lib dir="${common.dir}/lib/logging" />
			<lib dir="${common.dir}/lib/csv" />
			<lib dir="${common.dir}/lib/xstream" />
			<lib dir="${common.dir}/lib/spring-ws" />
			<lib dir="${common.dir}/lib/openmq" />
			<lib dir="${common.dir}/lib/jdbc" />
			<lib dir="${common.dir}/lib/opensso" />
			<lib dir="${common.dir}/lib/ldap" />
			<lib dir="${build.dir}/lib" />
		</war>
	</target>

	<target name="template.jar">
		<jar basedir="${build.dir}/classes" destfile="${build.dir}/lib/${jar.name}" />
	</target>

	<target name="template.exploded.include.libs">
		<copy todir="${build.dir}/web/WEB-INF/lib" flatten="true" overwrite="false">
			<path refid="libs" />
		</copy>
	</target>

	<target name="template.run.tests">
		<antcall target="template.set_test_db_name" />
		<junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once"
			   dir="${build.dir}/web">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<sysproperty key="log4j.configuration" value="org/flexpay/common/log4j.xml" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
			<sysproperty key="java.awt.headless" value="true" />
			<jvmarg value="-Xmx500m" />
			<test name="${test_name}" haltonfailure="yes">
				<formatter type="brief" usefile="false" />
			</test>
		</junit>
	</target>

	<target name="template.run.standalone">
		<antcall target="template.set_db_name" />
		<antcall target="template.set_test_db_name" />
		<java classpathref="classpath"
			  classname="org.flexpay.common.util.standalone.ApplicationRunner"
			  dir="${build.dir}/web" fork="yes">
			<jvmarg value="-Xmx750m" />
			<!--<jvmarg value="-Xmx350m" />-->
			<jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
			<sysproperty key="log4j.configuration"
						 value="WEB-INF/common/configs/log4j.xml" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
		</java>
	</target>

	<target name="template.profile.standalone">
		<fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

		<nbprofiledirect>
			<classpath refid="classpath" />
		</nbprofiledirect>

		<antcall target="template.set_db_name" />
		<java classpathref="classpath"
			  classname="org.flexpay.common.util.standalone.ApplicationRunner"
			  dir="${build.dir}/web" fork="yes">
			<jvmarg value="${profiler.info.jvmargs.agent}" />
			<jvmarg value="-Xmx150m" />
			<sysproperty key="log4j.configuration"
						 value="WEB-INF/common/configs/log4j.xml" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
		</java>
	</target>

	<property file="${common.dir}/web/WEB-INF/common.properties" />

	<target name="template.mysql.run">
		<exec executable="mysql" failonerror="true" input="${src.sql}">
			<arg value="--user=${mysql.username}" />
			<arg value="--password=${mysql.password}" />
			<arg value="--default-character-set=utf8" />
		</exec>
	</target>

	<target name="template.set_db_name">
		<fail unless="target.db.name">Need to specify target.db.name property</fail>
		<antcall target="template.switch_db">
			<param name="newDbName" value="${target.db.name}" />
		</antcall>
	</target>

	<target name="template.set_test_db_name">

		<condition property="prop.target_db" value="${target.db.name}" else="flexpay_test_db">
			<isset property="target.db.name" />
		</condition>
		<antcall target="template.switch_db">
			<param name="newDbName" value="${prop.target_db}" />
		</antcall>
	</target>

	<target name="template.switch_db">
		<replaceregexp encoding="UTF-8" flags="g"
					   match="FLEXPAY_DB_PLACEHOLDER" replace="${newDbName}">
			<fileset dir="${build.dir}">
				<include name="sql/init_db.sql" />
				<include name="web/WEB-INF/common.properties" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="template.switch_instance_id">
		<replaceregexp encoding="UTF-8" flags="g"
					   match="COMMON_INSTANCE" replace="${app.config.common.instanceId}">
			<fileset dir="${build.dir}">
				<include name="web/WEB-INF/web.xml" />
				<include name="web/WEB-INF/common/configs/log4j.xml" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="template.switch_log_name">
		<replaceregexp encoding="UTF-8" flags="g"
					   match="LOG_NAME" replace="${log_name}">
			<fileset dir="${build.dir}">
				<include name="web/WEB-INF/common/configs/log4j.xml" />
			</fileset>
		</replaceregexp>
	</target>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant.lib" />

	<target name="template.update_version">
		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svninfo">
			<arg line="info" />
		</exec>
		<propertyregex input="${svninfo}" property="svnrevision" regexp="Last Changed Rev: (\d+)" select="\1" />

		<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
					   encoding="UTF-8"
					   match="@@@VERSION@@@"
					   replace="${svnrevision}" />

		<tstamp>
			<format property="buildtime" pattern="MM/dd/yyyy HH:mm:ss" />
		</tstamp>
		<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
					   encoding="UTF-8"
					   match="@@@TIME@@@"
					   replace="${buildtime}" />

		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svnstatus">
			<arg line="status -q" />
		</exec>

		<!--<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"-->
		<!--encoding="UTF-8"-->
		<!--match="@@@FILESLIST@@@"-->
		<!--replace="${svnstatus}" />-->
		<replace file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
				 encoding="UTF-8"
				 token="@@@FILESLIST@@@"
				 value="${svnstatus}" />

		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svndiffres">
			<arg line="diff" />
		</exec>

		<echo file="${build.dir}/web/WEB-INF/jsp/common/diff.txt" message="${svndiffres}" />

	</target>


	<!-- Groovy ant task -->
	<taskdef name="groovy"
         classname="org.codehaus.groovy.ant.Groovy"
         classpathref="groovy.lib"/>

	<target name="template.configure.module" description="Configure module properties"
			unless="no.configure">
		<echo message="Running module ${module.name} configuration" />

		<groovy src="${common.dir}/etc/util/groovy/Configurer.groovy">
			<arg line="${module.name}" />
		</groovy>

	</target>

	<target name="war.security" description="Configure security options of war">
		<if>
			<istrue value="${app.config.common.useOpenSSO}" />
			<then>
				<replace file="${build.dir}/web/WEB-INF/web.xml"
						 encoding="UTF-8"
						 token="@@@SECURITYPLACEHOLDER@@@"
						 value="security-opensso" />
			</then>
			<else>
				<replace file="${build.dir}/web/WEB-INF/web.xml"
						 encoding="UTF-8"
						 token="@@@SECURITYPLACEHOLDER@@@"
						 value="security" />
			</else>
		</if>
	</target>

</project>
