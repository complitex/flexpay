<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.eirc.persistence">

	<class name="Consumer" table="eirc_consumers_tbl">
		<comment>Consumer is a person that gets some service</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled-Disabled status</comment>
			</column>
		</property>
		<property name="externalAccountNumber" index="I_external_account_number">
			<column name="external_account_number" not-null="true">
				<comment>Service providers internal account number</comment>
			</column>
				  </property>
		<many-to-one name="service" foreign-key="FK_eirc_consumer_service" class="org.flexpay.payments.persistence.Service">
			<column name="service_id" not-null="true">
				<comment>Service reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="responsiblePerson" foreign-key="FK_eirc_consumer_responsible_person"
					 class="org.flexpay.ab.persistence.Person">
			<column name="person_id" not-null="false">
				<comment>Responsible person reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="apartment" foreign-key="FK_eirc_consumer_apartment"
					 class="org.flexpay.ab.persistence.Apartment">
			<column name="apartment_id" not-null="true">
				<comment>Apartment reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="eircAccount" foreign-key="FK_eirc_consumer_eirc_account"
					 class="EircAccount">
			<column name="eirc_account_id" not-null="true">
				<comment>EIRC account reference</comment>
			</column>
		</many-to-one>
		<property name="beginDate">
			<column name="begin_date" not-null="true">
				<comment>Consumer begin date</comment>
			</column>
		</property>
		<property name="endDate">
			<column name="end_date" not-null="true">
				<comment>Consumer end date</comment>
			</column>
		</property>
		<many-to-one name="consumerInfo" foreign-key="FK_eirc_consumers_tbl_consumer_info_id"
					 class="ConsumerInfo">
			<column name="consumer_info_id" not-null="false">
				<comment>Service providers consumer details</comment>
			</column>
		</many-to-one>
		<set name="attributes" inverse="true" cascade="all-delete-orphan">
			<key column="consumer_id" not-null="true" />
			<one-to-many class="org.flexpay.eirc.persistence.consumer.ConsumerAttribute" />
		</set>
	</class>

	<class name="ConsumerInfo" table="eirc_consumer_infos_tbl"
		   optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<set name="consumers" cascade="all" inverse="true">
			<key column="consumer_info_id" not-null="false" />
			<one-to-many class="Consumer" />
		</set>
		<property name="status">
			<column name="status" not-null="true">
				<comment>ConsumerInfo status</comment>
			</column>
		</property>
		<property name="firstName">
			<column name="first_name" not-null="false">
				<comment>Prividers consumer first name</comment>
			</column>
		</property>
		<property name="middleName">
			<column name="middle_name" not-null="false">
				<comment>Prividers consumer middle name</comment>
			</column>
		</property>
		<property name="lastName">
			<column name="last_name" not-null="false">
				<comment>Prividers consumer last name</comment>
			</column>
		</property>
		<property name="cityName">
			<column name="city_name" not-null="false">
				<comment>Prividers consumer city name</comment>
			</column>
		</property>
		<property name="streetTypeName">
			<column name="street_type_name" not-null="false">
				<comment>Prividers consumer street type name</comment>
			</column>
		</property>
		<property name="streetName">
			<column name="street_name" not-null="false">
				<comment>Prividers consumer street name</comment>
			</column>
		</property>
		<property name="buildingNumber">
			<column name="building_number" not-null="false">
				<comment>Prividers consumer building number</comment>
			</column>
		</property>
		<property name="buildingBulk">
			<column name="building_bulk" not-null="false">
				<comment>Prividers consumer building bulk</comment>
			</column>
		</property>
		<property name="apartmentNumber">
			<column name="apartment_number" not-null="false">
				<comment>Prividers consumer apartment number</comment>
			</column>
		</property>
	</class>

	<class name="EircAccount" table="eirc_eirc_accounts_tbl">
		<comment>EIRC Personal accounts table</comment>
		<id name="id" column="id">
			<generator class="native" />
		</id>
		<version name="version" access="field">
			<column name="version">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
		<property name="status">
			<column name="status" not-null="true">
				<comment>Enabled-Disabled status</comment>
			</column>
		</property>
		<property name="accountNumber">
			<column name="account_number" not-null="true">
				<comment>EIRC account number</comment>
			</column>
		</property>
		<many-to-one name="apartment" foreign-key="FK_eirc_eirc_accounts_apartment_id"
					 class="org.flexpay.ab.persistence.Apartment">
			<column name="apartment_id" not-null="true">
				<comment>Apartment reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="person" foreign-key="FK_eirc_eirc_accounts_person_id"
					 class="org.flexpay.ab.persistence.Person">
			<column name="person_id" not-null="false">
				<comment>Responsible person reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="consumerInfo" foreign-key="FK_eirc_eirc_accounts_consumer_info_id"
					 class="ConsumerInfo">
			<column name="consumer_info_id" not-null="false">
				<comment>Consumer info used to create account</comment>
			</column>
		</many-to-one>
		<set name="consumers" inverse="true">
			<key column="eirc_account_id" not-null="true"/>
			<one-to-many class="Consumer"/>
		</set>
	</class>

	<query name="Consumer.findConsumers.count">
		select count(*)
		from Consumer
		where responsiblePerson.id = ? and service.id = ? and externalAccountNumber = ? and apartment.id = ?
	</query>

	<query name="Consumer.findConsumers">
		from Consumer
		where responsiblePerson.id = ? and service.id = ? and externalAccountNumber = ? and apartment.id = ?
	</query>

	<!-- see Service.findServicesByCode query -->
	<query name="Consumer.findConsumersByServiceTypeCode">
		select distinct o
		from Consumer o
			inner join o.service s
			inner join s.serviceProvider p
		where p.id=? and o.externalAccountNumber=? and s.id=?
	</query>

	<!-- see Service.findServicesByCode query -->
	<query name="Consumer.findConsumersByProviderServiceCode">
		select distinct o
		from Consumer o
			inner join o.service s
			inner join s.serviceProvider p
		where p.id=? and o.externalAccountNumber=? and s.externalCode=?
	</query>

	<query name="Consumer.findConsumersByAccountAndService">
		select distinct o
		from Consumer o
		where o.status=0 and o.externalAccountNumber=? and o.service.id=?
	</query>

	<query name="Consumer.readFull">
		select distinct o
		from Consumer o
			left join fetch o.consumerInfo
			left join fetch o.attributes a
			left join fetch a.type 
		where o.status=0 and o.id=?
	</query>

	<query name="EircAccount.findByPersonFIO.count">
		select count(a)
		from EircAccount a
			left join a.consumerInfo ci
			left join a.person p
			inner join p.personIdentities pi
		where a.status=0 and
			( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
			  upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
	</query>

	<query name="EircAccount.findByPersonFIO">
		select distinct a
		from EircAccount a
			left join fetch a.consumerInfo ci
			left join a.person p
			inner join p.personIdentities pi
		where a.status=0 and
			( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
			  upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
	</query>

	<query name="EircAccount.findByPersonAndApartment">
		select a
		from EircAccount a
			left join fetch a.consumerInfo
		where a.person.id=? and a.apartment.id=? and a.status=0
	</query>

    <query name="EircAccount.findByNumber">
        select distinct a
        from EircAccount a
            left join fetch a.consumerInfo
        where a.accountNumber=? and a.status=0
    </query>

    <query name="EircAccount.findByApartment.count">
        select count(a)
        from EircAccount a
        where a.status=0 and a.apartment.id=?
    </query>

    <query name="EircAccount.findByApartment">
        select distinct a
        from EircAccount a
            left join fetch a.apartment aa
            left join fetch a.consumerInfo
            left join a.person p
            inner join p.personIdentities
        where a.status=0 and aa.id=?
    </query>

	<query name="EircAccount.findByApartmentAndFIO.count">
		select count(a)
		from EircAccount a
            left join a.consumerInfo ci
            left join a.person p
            inner join p.personIdentities pi
        where a.status=0 and a.apartment.id=? and
            ( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
              upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
	</query>

	<query name="EircAccount.findByApartmentAndFIO">
		select distinct a
		from EircAccount a
            left join fetch a.apartment aa
            left join fetch a.consumerInfo ci
            left join a.person p
            inner join p.personIdentities pi
        where a.status=0 and aa.id=? and 
            ( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
              upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
	</query>

    <query name="EircAccount.findByBuildingAndFIO.count">
        select count(a)
        from EircAccount a
            left join a.apartment aa
            inner join aa.building b
            left join b.buildingses bs
            left join a.consumerInfo ci
            left join a.person p
            inner join p.personIdentities pi
        where a.status=0 and bs.id=? and
            ( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
              upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
    </query>

    <query name="EircAccount.findByBuildingAndFIO">
        select distinct a
        from EircAccount a
            left join fetch a.apartment aa
            inner join fetch aa.building b
            left join b.buildingses bs
            left join fetch a.consumerInfo ci
            left join a.person p
            inner join p.personIdentities pi
        where a.status=0 and bs.id=? and
            ( upper(pi.lastName || ' ' || pi.firstName || ' ' || pi.middleName) like upper(?) or
              upper(ci.lastName || ' ' || ci.firstName || ' ' || ci.middleName) like upper(?) )
    </query>

	<query name="EircAccount.findObjects">
		from EircAccount a
			left outer join fetch a.consumerInfo
		where a.status=0
	</query>

	<query name="EircAccount.findObjects.count">
		select count(*) from EircAccount a where a.status=0
	</query>

	<query name="EircAccount.readFull">
		select distinct a
		from EircAccount a
			left outer join fetch a.consumerInfo
			left join fetch a.consumers c
			left join fetch c.consumerInfo
			left join fetch c.responsiblePerson p
			left join fetch p.personAttributes pa
			left join fetch p.personIdentities pi
			left join fetch pi.identityType it
			left join fetch c.service s
			left join fetch s.serviceType st
		WHERE a.id=? and (c is null or c.status=0)
	</query>

</hibernate-mapping>
