<?xml version="1.0" encoding="UTF-8"?>
<project name="flexpay_templates" basedir="..">

	<property name="common.dir" value="${basedir}/common" />
	<property file="common/common_build.properties" />
	<property file="common/web/WEB-INF/common.properties" />

	<!-- Define classpath libraries -->
	<path id="commons.lib">
		<fileset dir="${common.dir}/lib/commons">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="hibernate.lib">
		<fileset dir="${common.dir}/lib">
			<include name="hibernate3/*.jar" />
			<include name="antlr/*.jar" />
			<include name="log4j/*.jar" />
			<include name="logging/*.jar" />
			<include name="freemarker/*.jar" />
		</fileset>
		<path refid="commons.lib" />
		<path refid="spring.lib" />
	</path>

	<path id="spring.lib">
		<fileset dir="${common.dir}/lib/spring3">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="freemarker.lib">
		<fileset dir="${common.dir}/lib/freemarker">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="struts.lib">
		<fileset dir="${common.dir}/lib">
			<include name="struts2/*.jar" />
			<include name="antlr/*.jar" />
			<include name="freemarker/*.jar" />
		</fileset>
	</path>

	<path id="log4j.lib">
		<fileset dir="${common.dir}/lib">
			<include name="log4j/*.jar" />
		</fileset>
	</path>

	<path id="j2ee.lib">
		<fileset dir="${common.dir}/lib">
			<include name="j2ee/*.jar" />
		</fileset>
	</path>

	<path id="junit.lib">
		<fileset dir="${common.dir}/lib">
			<include name="junit/*.jar" />
		</fileset>
	</path>

	<path id="javadbf.lib">
		<fileset dir="${common.dir}/lib">
			<include name="javadbf/*.jar" />
		</fileset>
	</path>

	<path id="ajax.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ajax/*.jar" />
		</fileset>
	</path>

	<path id="jbpm.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jbpm/*.jar" />
		</fileset>
	</path>

	<path id="drools.lib">
		<fileset dir="${common.dir}/lib">
			<include name="drools/*.jar" />
		</fileset>
	</path>

	<path id="itext.lib">
		<fileset dir="${common.dir}/lib">
			<include name="itext/*.jar" />
		</fileset>
	</path>

	<path id="jasperreports.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jasperreports/*.jar" />
		</fileset>
	</path>

	<path id="quartz.lib">
		<fileset dir="${common.dir}/lib">
			<include name="quartz/*.jar" />
		</fileset>
	</path>

	<path id="jetbrains.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jetbrains/annotations.jar" />
			<include name="jetbrains/javac2.jar" />
		</fileset>
	</path>

	<path id="jetbrains.compile.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jetbrains/*.jar" />
		</fileset>
	</path>

	<path id="jdbc.lib">
		<fileset dir="${common.dir}/lib">
			<include name="jdbc/*.jar" />
			<!-- log4jdbc used in tests depends on slf4j -->
			<include name="logging/*.jar" />
		</fileset>
	</path>

	<path id="csv.lib">
		<fileset dir="${common.dir}/lib">
			<include name="csv/*.jar" />
		</fileset>
	</path>

	<path id="xstream.lib">
		<fileset dir="${common.dir}/lib">
			<include name="xstream/*.jar" />
		</fileset>
	</path>

	<path id="spring-ws.lib">
		<fileset dir="${common.dir}/lib">
			<include name="spring-ws/*.jar" />
		</fileset>
	</path>

	<path id="openmq.lib">
		<fileset dir="${common.dir}/lib">
			<include name="openmq/*.jar" />
		</fileset>
	</path>

	<path id="opensso.lib">
		<fileset dir="${common.dir}/lib">
			<include name="opensso/*.jar" />
		</fileset>
	</path>

	<path id="ldap.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ldap/*.jar" />
		</fileset>
	</path>

	<path id="groovy.lib">
		<fileset dir="${common.dir}/lib">
			<include name="groovy/*.jar" />
		</fileset>
	</path>

	<path id="ant.lib">
		<fileset dir="${common.dir}/lib">
			<include name="ant/*.jar" />
		</fileset>
	</path>

	<path id="htmlunit.lib">
		<fileset dir="${common.dir}/lib">
			<include name="htmlunit/*.jar" />
		</fileset>
	</path>

	<path id="httpclient.lib">
		<fileset dir="${common.dir}/lib/httpclient">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="joda.lib">
		<fileset dir="${common.dir}/lib/joda">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="jackson.lib">
		<fileset dir="${common.dir}/lib/jackson">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="jpa.config">
		<fileset dir="${common.dir}/web" />
	</path>

	<property name="ldap.file.search.result" value="${build.dir}/search_result.ldif"/>
    <path id="ldap.file.result.ref">
        <fileset dir="${build.dir}">
            <include name="result.ldif" />
        </fileset>
    </path>
    <property name="ldap.file.result" value="${build.dir}/result.ldif"/>

	<!-- NotNull instrumentation javac task -->
	<taskdef name="javac2"
			 classname="com.intellij.ant.Javac2"
			 classpathref="jetbrains.compile.lib" />

	<!-- Build templates -->
	<target name="template.compile.production" depends="init.build">
		<javac2 srcdir="${sources.dir}" includes="**/*.java"
				destdir="${build.dir}/classes"
				deprecation="on" source="1.7" target="1.7" debug="on" encoding="utf8"
				classpathref="classpath">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:unchecked" />
		</javac2>
	</target>

	<target name="template.compile.test" depends="init.build">
		<javac2 srcdir="${sources.dir}" includes="**/*.java"
				destdir="${build.dir}/classes"
				debug="on" deprecation="on" source="1.7" target="1.7" encoding="utf8"
				classpathref="classpath">
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:unchecked" />
		</javac2>
	</target>

	<target name="init.build">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/lib" />
		<mkdir dir="${build.dir}/web" />
		<mkdir dir="${build.dir}/docs" />
		<mkdir dir="${build.dir}/src" />
		<mkdir dir="${build.dir}/empty" />
	</target>

	<target name="clean.build">
		<delete dir="${build.dir}/classes" includes="**/*" includeemptydirs="true" />
		<delete dir="${build.dir}/web" includes="**/*" />
		<delete dir="${build.dir}/docs" includes="**/*" />
	</target>

	<target name="clean.all">
		<delete dir="${build.dir}/classes" />
		<delete dir="${build.dir}/web" />
		<delete dir="${build.dir}/docs" />
		<delete dir="${build.dir}/lib" />
		<delete dir="${build.dir}/sql" />
	</target>

	<target name="init.distr">
		<mkdir dir="${distr.dir}" />
	</target>

	<target name="template.docs" depends="init.build,init.distr,clean.build">
		<javadoc sourcepath="${sources.dir}" destdir="${build.dir}/docs/api"
				 windowtitle="FlexPay ${module_name} API" encoding="UTF-8"
				 defaultexcludes="yes" author="true" version="true" use="true"
				 classpathref="classpath">
			<bottom>
				<![CDATA[<i>Copyright &#169; 2011 FlexPay. All Rights Reserved.</i>]]></bottom>
		</javadoc>
		<copy todir="${build.dir}/docs">
			<fileset refid="resources" />
		</copy>
		<zip basedir="${build.dir}/docs" destfile="${distr.dir}/${docs.file}" />
	</target>

	<target name="template.prepare.war" depends="init.build">
		<copy todir="${build.dir}/web${to_dir}" overwrite="true">
			<fileset refid="resources" />
		</copy>
		<native2ascii encoding="utf-8" src="${src.i18n.dir}"
					  dest="${build.dir}/src"
					  includes="**/*.properties" />
	</target>

	<target name="template.copy.classes">
		<copy todir="${build.dir}/web/WEB-INF/classes" overwrite="true">
			<fileset dir="${build.dir}/src" />
			<fileset dir="${build.dir}/classes" />
		</copy>
	</target>

	<target name="template.prepare.war.classes"
			description="Add all compiled classes to WEB-INF/classes">
		<copy todir="${build.dir}/web/WEB-INF/classes" overwrite="true">
			<fileset dir="${build.dir}/classes" />
		</copy>
	</target>

	<target name="common.war.include.libs">
		<war destfile="${warfile}" update="true">
			<lib dir="${common.dir}/lib/antlr" />
 			<lib dir="${common.dir}/lib/hibernate3" />
			<lib dir="${common.dir}/lib/spring3" />
			<lib dir="${common.dir}/lib/commons" />
			<lib dir="${common.dir}/lib/struts2" />
			<lib dir="${common.dir}/lib/log4j" />
			<lib dir="${common.dir}/lib/jbpm" />
			<lib dir="${common.dir}/lib/drools" />
			<lib dir="${common.dir}/lib/javadbf" />
			<lib dir="${common.dir}/lib/ajax" />
			<lib dir="${common.dir}/lib/itext" />
			<lib dir="${common.dir}/lib/quartz" />
			<lib dir="${common.dir}/lib/jasperreports" />
			<lib dir="${common.dir}/lib/freemarker" />
			<lib dir="${common.dir}/lib/logging" />
			<lib dir="${common.dir}/lib/csv" />
			<lib dir="${common.dir}/lib/xstream" />
			<lib dir="${common.dir}/lib/spring-ws" />
			<lib dir="${common.dir}/lib/openmq" />
			<lib dir="${common.dir}/lib/jdbc" />
			<lib dir="${common.dir}/lib/opensso" />
			<lib dir="${common.dir}/lib/ldap" />
			<lib dir="${common.dir}/lib/httpclient" />
			<lib dir="${common.dir}/lib/joda" />
			<lib dir="${common.dir}/lib/jackson" />
			<lib dir="${build.dir}/lib" />
		</war>
	</target>

	<target name="template.jar">
		<jar basedir="${build.dir}/classes" destfile="${build.dir}/lib/${jar.name}" />
	</target>

	<target name="template.exploded.include.libs">
		<copy todir="${build.dir}/web/WEB-INF/lib" flatten="true" overwrite="false">
			<path refid="libs" />
		</copy>
	</target>

	<target name="template.run.tests">
		<antcall target="template.set_test_db_name" />
		<junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once"
			   dir="${build.dir}/web">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<sysproperty key="log4j.configuration" value="org/flexpay/common/log4j.xml" />
			<sysproperty key="drools.session.conf" value="../../common/tests/data/org/flexpay/common/drools.session.conf" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
			<sysproperty key="java.awt.headless" value="true" />
			<jvmarg value="-Xmx500m" />
			<test name="${test_name}" haltonfailure="yes">
				<formatter type="brief" usefile="false" />
			</test>
		</junit>
	</target>

	<target name="template.run.ldapmodify">
		<echo>Run ${ldap.file.ldif}</echo>
		<java classname="com.sun.identity.shared.ldap.tools.LDAPModify" fork="yes"
			  outputproperty="ldap.modify.output" resultproperty="ldap.modify.result" >
			<jvmarg value="-Xmx750m" />
			<!--<jvmarg value="-Xmx350m" />-->
			<jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
			<arg line="-h ${ldap.host} -p ${ldap.port} -D '${ldap.userDn}' -w ${ldap.password} -a -f ${ldap.file.ldif}" />
			<classpath>
				<fileset dir="${common.dir}/lib/opensso/" includes="openssoclientsdk.jar"/>
			</classpath>
		</java>
		<echo>${ldap.modify.output}</echo>
		<fail message="Failed ${ldap.file.ldif}">
			<condition>
				<or>
					<equals arg1="${ldap.modify.result}" arg2="1"/>
					<contains string="${ldap.modify.output}" substring="Exception" />
				</or>
			</condition>
		</fail>
	</target>

	<target name="template.run.ldapsearch">
		<java classname="com.sun.identity.shared.ldap.tools.LDAPSearch" fork="yes"
			  output="${ldap.file.search.result}" resultproperty="ldap.search.result">
			<jvmarg value="-Xmx750m" />
			<!--<jvmarg value="-Xmx350m" />-->
			<jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
			<arg line="-h ${ldap.host} -p ${ldap.port} -D '${ldap.userDn}' -w ${ldap.password} -T -b ${ldap.base} -s sub ${ldap.search}" />
			<classpath>
				<fileset dir="${common.dir}/lib/opensso/" includes="openssoclientsdk.jar"/>
			</classpath>
		</java>
		<fail message="Failed parameter '${ldap.search}'">
			<condition>
				<equals arg1="${ldap.search.result}" arg2="1"/>
			</condition>
		</fail>
	</target>

	<target name="template.ldap.create-update-file" depends="template.run.ldapsearch">
		<loadfile property="ldap.search.dn.result" srcfile="${ldap.file.search.result}">
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">
					<param type="regexp" value="^dn:*"/>
				</filterreader>
			</filterchain>
		</loadfile>
		<delete file="${ldap.file.result}" />
		<touch file="${ldap.file.result}" />
		<groovy>
			def items = properties["ldap.search.dn.result"].split('\n')
			def f1 = new File(properties["ldap.file"])
			def text = f1.readLines()
			text.remove(0)
			def wtr = new File(properties["ldap.file.result"]).newWriter()
			items.each{
				wtr.writeLine("$it")
				for (line in text) {
					line = line.trim()
					if (line.size() > 0) {
						wtr.writeLine("$line")
					}
				}
				wtr.newLine()
			}
			wtr.close()
		</groovy>
		<property name="ldap.file.ldif" value="${ldap.file.result}" />
		<antcall target="template.run.ldapmodify"/>
	</target>

	<target name="template.ldap.get-version">
		<var name="ldap.search" value="flexpayVersion=*" />
		<antcall target="template.run.ldapsearch" />
		<loadfile property="ldap.version" srcfile="${ldap.file.search.result}">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern='flexpayVersion: *'/>
				</linecontainsregexp>
				<tokenfilter>
					<replaceregex replace='' pattern='flexpayVersion: ' />
				</tokenfilter>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<echo message="${ldap.version}"/>
	</target>

	<target name="template.ldap.update-version">
		<copy file="common/etc/ldap/update-version.ldif" todir="${build.dir}" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replaceregex replace='${ldap_version}' pattern='@@@VERSION@@@' />
					<replaceregex replace='${ldap.base}' pattern='@@@BASE@@@' />
				</tokenfilter>
			</filterchain>
		</copy>
		<var name="ldap.file.ldif" value="${build.dir}/update-version.ldif" />
		<antcall target="template.run.ldapmodify" />
	</target>

	<target name="template.ldap.update" depends="template.ldap.get-version">
		<sort id="ldap.updates">
			<path refid="ldap.files.ldif">
			</path>
			<name xmlns="antlib:org.apache.tools.ant.types.resources.comparators" />
		</sort>
		<property name="ldap.list.files.sorted" refid="ldap.updates" />
		<foreach  list="${ldap.list.files.sorted}" delimiter=":" target="template.ldap.update.run.file"
				  param="ldap.file" inheritall="true" />
	</target>

	<target name="template.ldap.update.run.file">
		<groovy>
			def result = properties["ldap.file"] =~ /(\d\d\d\d_\d\d_\d\d(_\d+)?)\.ldif$/
			def name = result[0][1]
			if (result[0][2] == null) {
				name += "_0"
			}
			properties.ldap_version = name
			properties.run = name > properties["ldap.version"]
		</groovy>
		<if>
			<istrue value="${run}" />
			<then>
				<echo message="${ldap.file}" />
				<antcall target="template.ldap.run.file" />
				<antcall target="template.ldap.update-version" />
			</then>
		</if>
	</target>

	<target name="template.ldap.run.file">
		<loadfile property="ldap.search.attribute" srcfile="${ldap.file}">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern='#[ \t]*attribute:.+$'/>
				</linecontainsregexp>
				<tokenfilter>
					<replaceregex replace='' pattern='#[ \t]*attribute:[ \t]*'/>
				</tokenfilter>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<if>
			<isset property="ldap.search.attribute" />
			<then>
				<var name="ldap.search" value="${ldap.search.attribute}" />
				<antcall target="template.ldap.create-update-file"/>
			</then>
			<else>
				<echo>target to template.run.ldapmodify</echo>
				<var name="ldap.file.ldif" value="${ldap.file}" />
				<antcall target="template.run.ldapmodify"/>
			</else>
		</if>
	</target>

	<target name="template.ldap.set.flexpay.user">
		<copy file="common/etc/ldap/set_flexpay_user.ldif" todir="${build.dir}" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replaceregex replace='${ldap.login}' pattern='@@@LOGIN@@@' />
					<replaceregex replace='${ldap.base}' pattern='@@@BASE@@@' />
					<replaceregex replace='${ldap.person.class}' pattern='@@@FLEXPAY_PERSON_CLASS@@@' />
				</tokenfilter>
			</filterchain>
		</copy>
		<var name="ldap.file.ldif" value="${build.dir}/set_flexpay_user.ldif" />
		<antcall target="template.run.ldapmodify" />
	</target>

	<target name="template.run.standalone">
		<antcall target="template.set_db_name" />
		<antcall target="template.set_test_db_name" />
		<java classpathref="classpath"
			  classname="org.flexpay.common.util.standalone.ApplicationRunner"
			  dir="${build.dir}/web" fork="yes">
			<jvmarg value="-Xmx750m" />
			<!--<jvmarg value="-Xmx350m" />-->
			<jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
			<sysproperty key="log4j.configuration"
						 value="WEB-INF/common/configs/log4j.xml" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
		</java>
	</target>

	<target name="template.profile.standalone">
		<fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

		<nbprofiledirect>
			<classpath refid="classpath" />
		</nbprofiledirect>

		<antcall target="template.set_db_name" />
		<java classpathref="classpath"
			  classname="org.flexpay.common.util.standalone.ApplicationRunner"
			  dir="${build.dir}/web" fork="yes">
			<jvmarg value="${profiler.info.jvmargs.agent}" />
			<jvmarg value="-Xmx150m" />
			<sysproperty key="log4j.configuration"
						 value="WEB-INF/common/configs/log4j.xml" />
			<sysproperty key="java.naming.factory.initial"
						 value="org.flexpay.common.test.MockInitialContextFactory" />
		</java>
	</target>

	<property file="${common.dir}/web/WEB-INF/common.properties" />

	<target name="template.mysql.run">
		<exec executable="mysql" failonerror="true" input="${src.sql}">
			<arg value="--user=${mysql.username}" />
			<arg value="--password=${mysql.password}" />
			<arg value="--default-character-set=utf8" />
		</exec>
	</target>

	<target name="template.set_db_name">
		<fail unless="target.db.name">Need to specify target.db.name property</fail>
		<antcall target="template.switch_db">
			<param name="newDbName" value="${target.db.name}" />
		</antcall>
	</target>

	<target name="template.set_test_db_name">

		<condition property="prop.target_db" value="${target.db.name}" else="flexpay_test_db">
			<isset property="target.db.name" />
		</condition>
		<antcall target="template.switch_db">
			<param name="newDbName" value="${prop.target_db}" />
		</antcall>
	</target>

	<target name="template.switch_db">
		<replaceregexp encoding="UTF-8" flags="g"
					   match="FLEXPAY_DB_PLACEHOLDER" replace="${newDbName}">
			<fileset dir="${build.dir}">
				<include name="sql/init_db.sql" />
				<include name="web/WEB-INF/common.properties" />
                <include name="web/WEB-INF/classes/common.properties" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="template.switch_instance_id">
		<property file="${common.dir}/web/WEB-INF/common.properties" prefix="conf" />
		<replaceregexp encoding="UTF-8" flags="g"
					   match="COMMON_INSTANCE" replace="${conf.app.config.common.instanceId}">
			<fileset dir="${build.dir}">
				<include name="web/WEB-INF/web.xml" />
				<include name="web/WEB-INF/common/configs/log4j.xml" />
			</fileset>
		</replaceregexp>
	</target>

	<target name="template.switch_log_name">
		<replaceregexp encoding="UTF-8" flags="g"
					   match="LOG_NAME" replace="${log_name}">
			<fileset dir="${build.dir}">
				<include name="web/WEB-INF/common/configs/log4j.xml" />
			</fileset>
		</replaceregexp>
	</target>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant.lib" />

	<target name="template.update_version">
		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svninfo">
			<arg line="info" />
		</exec>
		<propertyregex input="${svninfo}" property="svnrevision" regexp="Last Changed Rev: (\d+)" select="\1" />

		<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
					   encoding="UTF-8"
					   match="@@@VERSION@@@"
					   replace="${svnrevision}" />

		<tstamp>
			<format property="buildtime" pattern="MM/dd/yyyy HH:mm:ss" />
		</tstamp>
		<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
					   encoding="UTF-8"
					   match="@@@TIME@@@"
					   replace="${buildtime}" />

		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svnstatus">
			<arg line="status -q" />
		</exec>

		<!--<replaceregexp file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"-->
		<!--encoding="UTF-8"-->
		<!--match="@@@FILESLIST@@@"-->
		<!--replace="${svnstatus}" />-->
		<replace file="${build.dir}/web/WEB-INF/jsp/common/about.jsp"
				 encoding="UTF-8"
				 token="@@@FILESLIST@@@"
				 value="${svnstatus}" />

		<exec executable="svn"
			  dir="${basedir}"
			  outputproperty="svndiffres">
			<arg line="diff" />
		</exec>

		<echo file="${build.dir}/web/WEB-INF/jsp/common/diff.txt" message="${svndiffres}" />

	</target>


	<!-- Groovy ant task -->
	<taskdef name="groovy"
			 classname="org.codehaus.groovy.ant.Groovy"
			 classpathref="groovy.lib" />

	<target name="template.configure.module" description="Configure module properties" unless="no.configure">
		<echo message="Running module ${module.name} configuration" />

		<groovy src="${common.dir}/etc/util/groovy/Configurer.groovy">
			<arg line="${module.name}" />
		</groovy>

	</target>

	<target name="war.security" description="Configure security options of war">
		<property file="${common.dir}/web/WEB-INF/common.properties" prefix="conf" />
		<if>
			<istrue value="${conf.app.config.common.useOpenSSO}" />
			<then>
				<echo>Using OpenSSO</echo>
				<replace file="${build.dir}/web/WEB-INF/web.xml"
						 encoding="UTF-8"
						 token="@@@SECURITYPLACEHOLDER@@@"
						 value="security-opensso" />
				<xslt in="${build.dir}/web/WEB-INF/web.xml"
					  out="${build.dir}/web/WEB-INF/web.xml-tmp"
					  style="${common.dir}/etc/util/opensso/WebXml.xsl" />
				<move file="${build.dir}/web/WEB-INF/web.xml-tmp"
					  tofile="${build.dir}/web/WEB-INF/web.xml"
					  overwrite="true" />
			</then>
			<else>
				<echo>Using server security</echo>
				<replace file="${build.dir}/web/WEB-INF/web.xml"
						 encoding="UTF-8"
						 token="@@@SECURITYPLACEHOLDER@@@"
						 value="security" />
			</else>
		</if>
	</target>

</project>
