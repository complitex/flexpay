<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- Add hibernate statistics capabilities -->
    <!--<bean id="hibernateStatistics" class="org.hibernate.jmx.StatisticsService"-->
    <!--p:sessionFactory-ref="flexpaySessionFactory" />-->

    <!--
        this bean needs to be eagerly pre-instantiated in order for the exporting to occur;
        this means that it must not be marked as lazily initialized
      -->
<!--
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="bean:name=hibernateStatistics${flexpay.module.name.common}" value-ref="hibernateStatistics" />
            </map>
        </property>
        <property name="assembler">
            <bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
                <property name="methodMappings">
                    <props>
                        <prop key="bean:name=hibernateStatsMBean">
                        </prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>
-->

	<!-- Create transaction manager  -->

	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<!--
	<bean id="transactionManager"
		  class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="flexpaySessionFactory" />
	</bean>
	   -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="org.jbpm.persistence.jpa" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${hibernate.show_sql}" />
			</bean>
		</property>
		<property name="persistenceXmlLocation" value="classpath*:persistence.xml" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
	</bean>

	<!--
		Indicates that transaction
		configuration is defined by Java5 annotations on bean classes, and
		that proxies are automatically to be created for the relevant
		annotated beans.

        Transaction semantics such as propagation settings, the isolation level,
        the rollback rules, etc are all defined in the annotation metadata.
    -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="jpaTemplate"
          class="org.springframework.orm.jpa.JpaTemplate"
          p:entityManagerFactory-ref="entityManagerFactory" />

    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource" />
    </bean>

    <!--  Dao Layer generic config-->
    <bean id="namingStrategy"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean"
          p:staticField="${namingStrategy.staticField}" />

    <bean id="extendedFinderNamingStrategy"
          class="org.flexpay.common.dao.finder.impl.ExtendedFinderNamingStrategy" />

    <bean id="finderIntroductionAdvisor"
          class="org.flexpay.common.dao.finder.impl.FinderIntroductionAdvisor" />

    <bean id="abstractDaoTarget"
          class="org.flexpay.common.dao.impl.GenericDaoHibernateImpl"
          abstract="true"
          p:jpaTemplate-ref="jpaTemplate"
          p:namingStrategy-ref="extendedFinderNamingStrategy" />

    <bean id="abstractDao"
          abstract="true"
          class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
                <value>finderIntroductionAdvisor</value>
            </list>
        </property>
    </bean>

    <bean name="lockManager"
          class="org.flexpay.common.locking.LockManager"
          destroy-method="releaseAll"
          p:jpaTemplate-ref="jpaTemplate" />

</beans>
