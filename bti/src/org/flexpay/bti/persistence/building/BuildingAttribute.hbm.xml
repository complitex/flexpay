<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.bti.persistence.building">

    <class name="BuildingAttribute" table="bti_building_attributes_tbl">
        <comment>Building attributes</comment>
        <id name="id" column="id">
            <generator class="native"/>
        </id>

        <many-to-one name="building" class="BtiBuilding"
                     foreign-key="FK_bti_building_attributes_tbl_building_id">
            <column name="building_id" not-null="true">
                <comment>Building reference</comment>
            </column>
        </many-to-one>

        <many-to-one name="attributeType" class="BuildingAttributeType"
                     foreign-key="bti_building_attributes_tbl_attribute_type_id">
            <column name="attribute_type_id" not-null="true">
                <comment>Attribute type reference</comment>
            </column>
        </many-to-one>

		<property name="dateValue">
			<column name="date_value" not-null="false" sql-type="datetime">
				<comment>Optional date value</comment>
			</column>
		</property>
		<property name="intValue">
			<column name="int_value" not-null="false">
				<comment>Optional int value</comment>
			</column>
		</property>
		<property name="boolValue">
			<column name="bool_value" not-null="false">
				<comment>Optional boolean value</comment>
			</column>
		</property>
		<property name="longValue">
			<column name="long_value" not-null="false">
				<comment>Optional long value</comment>
			</column>
		</property>
		<property name="stringValue">
			<column name="string_value" not-null="false">
				<comment>Optional string value</comment>
			</column>
		</property>
		<property name="doubleValue">
			<column name="double_value" not-null="false">
				<comment>Optional double value</comment>
			</column>
		</property>
		<property name="decimalValue">
			<column name="decimal_value" not-null="false" scale="5">
				<comment>Optional double value</comment>
			</column>
		</property>
		<property name="valueType">
			<column name="value_type" not-null="true">
				<comment>Value type discriminator</comment>
			</column>
		</property>
		<property name="begin" type="date">
			<column name="begin_date">
				<comment>Attribute value begin date</comment>
			</column>
		</property>
		<property name="end" type="date">
			<column name="end_date">
				<comment>Attribute value end date</comment>
			</column>
		</property>
		<property name="temporal">
			<column name="temporal_flag" not-null="true">
				<comment>Temporal attribute flag</comment>
			</column>
		</property>

    </class>

    <query name="BuildingAttribute.findAttributes">
        select distinct b
        from BuildingAttribute b
        where b.building.id = ?
    </query>

    <query name="BuildingAttribute.readSimpleAttributes">
        select distinct a
        from BuildingAttribute a
        	left join fetch a.attributeType
        where a.building.id=?
    </query>

    <query name="BtiBuilding.findBuildingWithAttributes">
		select distinct b
        from BtiBuilding b
        	left join fetch b.attributes a
        	left join fetch a.attributeType
        where b.id=?
    </query>

    <query name="BtiBuilding.findBuildingWithAttributesCollection">
		select distinct b
        from BtiBuilding b
        	left join fetch b.attributes a
        	left join fetch a.attributeType
        where b.id in (:ids)
    </query>

    <query name="BtiBuilding.findBuildingWithAttributesByAddress">
        select distinct b
        from BtiBuilding b
        	left join b.buildingses addr
        	left join fetch b.attributes a
        	left join fetch a.attributeType
        where addr.id=?
    </query>

    <query name="BtiBuilding.findByTown">
        from BtiBuilding b
        where b.district.parent.id = ?
    </query>

</hibernate-mapping>
