<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
		"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.flexpay.payments.persistence">

	<class name="Service" table="payments_services_tbl" optimistic-lock="version">
		<comment>Services</comment>
		<id name="id">
			<column name="id">
				<comment>Primary key</comment>
			</column>
			<generator class="native"/>
		</id>
		<version name="version" access="field">
			<column name="version">
				<comment>Optimistic lock version</comment>
			</column>
		</version>
        <property name="status">
            <column name="status" not-null="true">
                <comment>Enabled-disabled status</comment>
            </column>
        </property>
		<property name="externalCode">
			<column name="external_code" not-null="false" index="INDX_payments_service_external_code">
				<comment>Service providers internal service code</comment>
			</column>
		</property>
		<property name="beginDate" type="date">
			<column name="begin_date" not-null="true">
				<comment>The Date service is valid from</comment>
			</column>
		</property>
		<property name="endDate" type="date">
			<column name="end_date" not-null="true">
				<comment>The Date service is valid till</comment>
			</column>
		</property>
        <property name="canReturn">
            <column name="can_return" not-null="true" default="true">
                <comment>Can this service operations return or not</comment>
            </column>
        </property>
		<many-to-one name="serviceProvider" foreign-key="FK_payments_service_service_provider"
					 class="org.flexpay.orgs.persistence.ServiceProvider">
			<column name="provider_id" not-null="true">
				<comment>Service provider reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="serviceType" foreign-key="FK_payments_service_service_type" class="ServiceType">
			<column name="type_id" not-null="true">
				<comment>Service type reference</comment>
			</column>
		</many-to-one>
		<many-to-one name="measureUnit" foreign-key="FK_payments_services_tbl_measure_unit_id"
					 class="org.flexpay.common.persistence.MeasureUnit">
			<column name="measure_unit_id" not-null="false">
				<comment>Measure unit reference</comment>
			</column>
		</many-to-one>
		<set name="descriptions" inverse="true" cascade="all-delete-orphan">
			<key column="service_id" not-null="true"/>
			<one-to-many class="org.flexpay.payments.persistence.ServiceDescription"/>
		</set>
		<many-to-one name="parentService" foreign-key="FK_payments_service_parent_service_id" class="Service">
			<column name="parent_service_id" not-null="false">
				<comment>If parent service reference present service is a subservice</comment>
			</column>
		</many-to-one>
		<set name="childServices" inverse="true">
			<key column="parent_service_id" not-null="true"/>
			<one-to-many class="org.flexpay.payments.persistence.Service"/>
		</set>
	</class>

	<class name="ServiceDescription" table="payments_service_descriptions_tbl">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<property name="name"/>
		<properties name="lang_service_pair" unique="true">
			<many-to-one name="lang" foreign-key="FK_payments_service_desciption_language"
						 class="org.flexpay.common.persistence.Language">
				<column name="language_id" not-null="true">
					<comment>Language reference</comment>
				</column>
			</many-to-one>
			<many-to-one name="translatable" class="Service" foreign-key="FK_payments_service_description_service">
				<column name="service_id" not-null="true">
					<comment>Service reference</comment>
				</column>
			</many-to-one>
		</properties>
	</class>

	<class name="ServiceType" table="payments_service_types_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<property name="status" not-null="true"/>
		<property name="code" not-null="true"/>

		<set name="typeNames" inverse="true" cascade="all-delete-orphan">
			<key column="service_type_id" not-null="true"/>
			<one-to-many class="ServiceTypeNameTranslation"/>
		</set>
	</class>

	<class name="ServiceTypeNameTranslation"
		   table="payments_service_type_name_translations_tbl" optimistic-lock="version">
		<id name="id" column="id">
			<generator class="native"/>
		</id>
		<property name="name" not-null="true"/>
		<property name="description" not-null="true"/>
		<properties name="lang_service_type_pair" unique="true">
			<many-to-one name="lang" foreign-key="FK_payments_service_type_name_translation_language"
						 class="org.flexpay.common.persistence.Language">
				<column not-null="true" name="language_id">
					<comment>Language reference</comment>
				</column>
			</many-to-one>
			<many-to-one name="translatable" foreign-key="FK_payments_service_type_name_translation_service_type"
						 class="org.flexpay.payments.persistence.ServiceType">
				<column name="service_type_id" not-null="true">
					<comment>Service type reference</comment>
				</column>
			</many-to-one>
		</properties>
	</class>

	<query name="ServiceType.findServiceTypes.count">
		select count(*)
		from ServiceType st
		where st.status=0
	</query>

	<query name="ServiceType.findServiceTypes">
		select distinct st
		from ServiceType st
			left join fetch st.typeNames
		where st.status=0
	</query>

	<query name="ServiceType.findAllServiceTypes">
		select distinct o
		from ServiceType o
			left join fetch o.typeNames
		where o.status=0
	</query>	

	<query name="ServiceType.readFull">
		select distinct o
		from ServiceType o
			left join fetch o.typeNames
		where o.id=?
	</query>

	<query name="Service.readFull">
		select distinct s
		from Service s
			left join fetch s.descriptions
			inner join fetch s.serviceType t
			left join fetch t.typeNames
			left join fetch s.parentService ps
            left join fetch ps.descriptions 
			left join fetch s.childServices
			inner join fetch s.serviceProvider p
			inner join fetch p.organization o 
			left join fetch o.names
		where s.id=?
	</query>

	<query name="Service.readFullCollection">
		select distinct s
		from Service s
			left join fetch s.descriptions
		where s.id in (:ids)
	</query>

	<query name="Service.findServicesByCode">
		select distinct o
		from Service o
			inner join o.serviceProvider p
		where p.id=? and o.id=?
	</query>

    <query name="Service.findServices">
		select distinct o
		from Service o
			inner join o.serviceProvider p
		where p.id=?
	</query>

	<query name="Service.findServicesByTypeCodeAndDate">
		select distinct o
		from Service o
		where o.serviceProvider.id=? and o.serviceType.id=? and ? between o.beginDate and o.endDate 
	</query>

	<query name="Service.findServicesByTypeCode">
		select distinct o
		from Service o
		inner join fetch o.serviceType
		where o.serviceProvider.id=? and o.serviceType.id=? 
	</query>

	<query name="Service.findAllServices">
		select distinct s
		from Service s
            left join fetch s.descriptions
            inner join fetch s.serviceProvider p
            left join fetch p.descriptions
		where s.status=0
		order by s.parentService.id ASC
	</query>

	<query name="Service.findServicesByProviderCode">
		select distinct o
		from Service o
			inner join o.serviceProvider p
		where p.id=? and o.externalCode=?
	</query>

	<query name="Service.findIntersectingServices"><![CDATA[
		select distinct o
		from Service o
			inner join o.serviceProvider p
			inner join o.serviceType st
		where p.id=? and st.id=? and
			((? <= o.beginDate  and o.beginDate <= ?) or (? <= o.endDate and o.endDate <= ?))
	]]></query>

</hibernate-mapping>
